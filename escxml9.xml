<tokens>
<class>
<keyword>class</keyword>
<identifier>thing</identifier>
<symbol>{</symbol>
<classVarDec>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>a</identifier>
<symbol>,</symbol>
<identifier>b</identifier>
<symbol>;</symbol>
</classVarDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>CallSub</identifier>
<symbol>(</symbol>
<parameterList>
<keyword>int</keyword>
<identifier>x</identifier>
<symbol>,</symbol>
<keyword>char</keyword>
<identifier>y</identifier>
<symbol>,</symbol>
<keyword>boolean</keyword>
<identifier>h</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>l</identifier>
<symbol>,</symbol>
<identifier>otherType</identifier>
<identifier>q</identifier>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<varDec>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>u</identifier>
<symbol>,</symbol>
<identifier>v</identifier>
<symbol>;</symbol>
</varDec>
<varDec>
<keyword>var</keyword>
<identifier>string</identifier>
<identifier>a</identifier>
<symbol>;</symbol>
</varDec>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>stuffff</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier>u</identifier>
<symbol>=</symbol>
<expression>
<term>
<integerConstant>6</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>v</identifier>
<symbol>=</symbol>
<expression>
<term>
<integerConstant>10</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>a</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>lol</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol>(</symbol>
<expression>
<term>
<identifier>u</identifier>
</term>
<symbol>=</symbol>
<term>
<integerConstant>10</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>CallAnotherSub</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>u</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>v</identifier>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<returnStatement>
<keyword>return</keyword>
<expression>
<term>
<identifier>u</identifier>
</term>
<symbol>+</symbol>
<term>
<identifier>v</identifier>
</term>
</expression>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>doSomeMoreStuff</identifier>
<symbol>(</symbol>
<parameterList>
<keyword>char</keyword>
<identifier>input</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>i</identifier>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<whileStatement>
<symbol>(</symbol>
<expression>
<term>
<identifier>i</identifier>
</term>
<symbol><</symbol>
<term>
<integerConstant>10</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>i</identifier>
</term>
<symbol>+</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statements>
<symbol>}</symbol>
</whileStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<symbol>}</symbol>
</class>
</tokens>

